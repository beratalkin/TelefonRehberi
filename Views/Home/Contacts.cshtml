@using System.Text.Json;
@model IEnumerable<WebApplication1.Models.Contact>
@{
	ViewBag.Title = "Telefon Rehberi";
	Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Telefon Rehberi</title>
	<!-- Bootstrap CSS -->
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
	<div class="container my-4">
		<h2>Telefon Rehberi</h2>

		<div class="row">
			<!-- Sol Sütun: Tablo -->
			<div class="col-md-8">
				<input type="text" id="searchInput" class="form-control" placeholder="İsim veya Soyisim Ara" onkeyup="searchTable()">
				<table class="table table-striped">
					<thead>
						<tr>
							<th> </th>
							<th>#</th>
							<th>Ad</th>
							<th>Soyad</th>
							<th>Telefon Numarası</th>
							<th>Eklenme Tarihi</th>
							<th>Ekleyen</th>
						</tr>
					</thead>
					<tbody id="table-body">
						<!-- Dinamik olarak JavaScript ile doldurulacak -->
					</tbody>
				</table>

				<!-- Pagination -->
				<nav>
					<ul class="pagination" id="pagination"></ul>
				</nav>
			</div>

			<!-- Sağ Sütun -->
			<div class="col-md-4">
				<div class="d-flex justify-content-between mb-3">
					<button id="btnAdd" class="btn btn-success">Ekle</button>
					<button id="btnEdit" class="btn btn-warning">Düzenle</button>
					<button id="btnDelete" class="btn btn-danger">Sil</button>
					<button id="btnLogout" class="btn btn-danger">Çıkış Yap</button>
				</div>


				<!-- Form Alanı -->
				<div id="formContainer" class="mt-3" style="display: none;">
					<!-- Ekleme Formu -->
					<form asp-action="AddContact" method="post" class="formContent" id="addForm" style="display: none;">
						<h4>Yeni Contact Ekle</h4>
						<div class="mb-3">
							<label for="Name" class="form-label">Ad</label>
							<input type="text" class="form-control" id="Name" name="Name" placeholder="Ad" required>
						</div>
						<div class="mb-3">
							<label for="Surname" class="form-label">Soyad</label>
							<input type="text" class="form-control" id="Surname" name="Surname" placeholder="Soyad" required>
						</div>
						<div class="mb-3">
							<label for="PhoneNumber" class="form-label">Telefon Numarası</label>
							<input type="text" class="form-control" id="PhoneNumber" name="PhoneNumber" placeholder="Telefon Numarası" required>
						</div>
						<button type="submit" class="btn btn-primary">Ekle</button>
					</form>

					<!-- Düzenleme Formu -->
					<form asp-action="EditContact" method="post" class="formContent" id="editForm" style="display: none;">
						<h4>Contact Düzenle</h4>
						<div class="mb-3">
							<label for="EditName" class="form-label">Ad</label>
							<input type="text" class="form-control" id="EditName" name="Name" placeholder="Ad" required>
						</div>
						<div class="mb-3">
							<label for="EditSurname" class="form-label">Soyad</label>
							<input type="text" class="form-control" id="EditSurname" name="Surname" placeholder="Soyad" required>
						</div>
						<div class="mb-3">
							<label for="EditPhoneNumber" class="form-label">Telefon Numarası</label>
							<input type="text" class="form-control" id="EditPhoneNumber" name="PhoneNumber" placeholder="Telefon Numarası" required>
						</div>
						<button type="submit" class="btn btn-warning">Düzenle</button>
					</form>
				</div>
			</div>
		</div>
	</div>

	<!-- Bootstrap JS ve jQuery -->
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.min.js"></script>
	<script>
		const data = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));
		const rowsPerPage = 10; // Her sayfada gösterilecek kayıt sayısı
		let currentPage = 1;
		let filteredData = [...data];
		let filteredNonDeletedData;

		function renderTable(page) {
			const tableBody = document.getElementById("table-body");
			tableBody.innerHTML = ""; // Eski satırları temizle

			const startIndex = (page - 1) * rowsPerPage;
			const endIndex = startIndex + rowsPerPage;
			// isDeleted değeri true olanları filtrele
			filteredNonDeletedData = filteredData.filter(item => !item.IsDeleted);

			const paginatedData = filteredNonDeletedData.slice(startIndex, endIndex);


			paginatedData.forEach((item, index) => {
					const row = `<tr>
					<td><input type="checkbox" class="row-checkbox" data-id="${item.ContactId}"></td>
					<td>${startIndex + index + 1}</td>
					<td>${item.Name}</td>
					<td>${item.Surname}</td>
					<td>${item.PhoneNumber}</td>
					<td>${new Date(item.CreatedAt).toLocaleString()}</td>
					<td>${item.CreatedBy}</td>
				</tr>`;
				tableBody.innerHTML += row;
			});
		}

		function renderPagination() {
			const pagination = document.getElementById("pagination");
			pagination.innerHTML = "";

			const totalPages = Math.ceil(filteredNonDeletedData.length / rowsPerPage);

			for (let i = 1; i <= totalPages; i++) {
				const isActive = i === currentPage ? "active" : "";
				const pageItem = `<li class="page-item ${isActive}">
					<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
				</li>`;
				pagination.innerHTML += pageItem;
			}

			pagination.innerHTML = `
				<li class="page-item ${currentPage === 1 ? "disabled" : ""}">
					<a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Önceki</a>
				</li>` + pagination.innerHTML + `
				<li class="page-item ${currentPage === totalPages ? "disabled" : ""}">
					<a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Sonraki</a>
				</li>`;
		}

		function changePage(page) {
			const totalPages = Math.ceil(filteredNonDeletedData.length / rowsPerPage);
			if (page < 1 || page > totalPages) return;

			currentPage = page;
			renderTable(currentPage);
			renderPagination();
		}

		function searchTable() {
			const searchTerm = document.getElementById("searchInput").value.toLowerCase();

			// Arama sonucuna göre verileri filtreliyoruz
			filteredData = data.filter(item => {
				const fullName = item.Name.toLowerCase()+" "+item.Surname.toLowerCase();
				return fullName.includes(searchTerm);
			});

			currentPage = 1; // Arama yapıldığında sayfa numarasını 1'e sıfırlıyoruz
			renderTable(currentPage);
			renderPagination();
		}

		function getSelectedRows() {
			const selectedCheckboxes = document.querySelectorAll(".row-checkbox:checked");
			const selectedData = [];

			selectedCheckboxes.forEach((checkbox) => {
				const rowIndex = checkbox.getAttribute("data-id");
				selectedData.push(rowIndex);
			});

			return selectedData;
		}



		renderTable(currentPage);
		renderPagination();

			document.addEventListener("DOMContentLoaded", () => {
			const btnAdd = document.getElementById("btnAdd");
			const btnEdit = document.getElementById("btnEdit");
			const btnDelete = document.getElementById("btnDelete");
			const formContainer = document.getElementById("formContainer");
			const addForm = document.getElementById("addForm");
			const editForm = document.getElementById("editForm");

			// Tüm form içeriklerini gizle
			function hideAllForms() {
				addForm.style.display = "none";
				editForm.style.display = "none";
			}

			// Ekle Butonu Tıklama
			btnAdd.addEventListener("click", () => {
				formContainer.style.display = "block";
				hideAllForms();
				addForm.style.display = "block";
			});

			// Düzenle Butonu Tıklama
			btnEdit.addEventListener("click", () => {
				const selectedCheckboxes = document.querySelectorAll(".row-checkbox:checked");

					// Birden fazla veya hiç checkbox seçilmediyse uyarı göster
					if (selectedCheckboxes.length !== 1) {
						alert("Lütfen yalnızca bir satır seçin.");
						return;
					}

					// Seçilen checkbox'ın satırını bul
					const selectedRow = selectedCheckboxes[0].closest("tr");
					const cells = selectedRow.getElementsByTagName("td");

					// Formu doldur
					document.getElementById("EditName").value = cells[2].innerText; // Ad
					document.getElementById("EditSurname").value = cells[3].innerText; // Soyad
					document.getElementById("EditPhoneNumber").value = cells[4].innerText; // Telefon Numarası

					formContainer.style.display = "block";
					hideAllForms();
					editForm.style.display = "block";
			});

			// Sil Butonu Tıklama
			btnDelete.addEventListener("click", () => {
			const selectedRows = getSelectedRows(); // Seçilen checkbox'lardan ID'leri al

			if (selectedRows.length === 0) {
				alert("Lütfen silmek için bir öğe seçin.");
				return;
			}

			if (confirm("Seçilen öğeleri silmek istediğinize emin misiniz?")) {
				fetch("/Home/DeleteContacts", {
					method: "POST",
					headers: {
						"Content-Type": "application/json"
					},
					body: JSON.stringify(selectedRows)
				})
				.then(response => {
					if (response.ok) {
						alert("Seçilen kayıtlar başarıyla silindi.");
						location.reload(); // Sayfayı yenile
					} else {
						response.json().then(data => alert(data.message));
					}
				})
				.catch(error => {
					console.error("Hata:", error);
					alert("Bir hata oluştu.");
				});
			}
		});

			document.getElementById("editForm").addEventListener("submit", (event) => {
			event.preventDefault(); // Formun varsayılan davranışını engelle

			// Düzenleme Formu için jQuery Validation
		const formIsValid = $("#editForm").validate({
			rules: {
				Name: {
					required: true,
				},
				Surname: {
					required: true,
				},
				PhoneNumber: {
					required: true,
					digits: true,
				}
			},
			messages: {
				Name: {
					required: "Ad girilmesi zorunludur.",
				},
				Surname: {
					required: "Soyad girilmesi zorunludur.",
				},
				PhoneNumber: {
					required: "Telefon numarası girilmesi zorunludur.",
					digits: "Telefon numarası yalnızca rakamlardan oluşmalıdır.",
				}
			}
		}).form();
			console.log(formIsValid);
			if(!formIsValid){
				return;
			}

			const selectedCheckbox = document.querySelector(".row-checkbox:checked");
			const contactId = selectedCheckbox.getAttribute("data-id");

			const updatedData = {
				ContactId: contactId,
				Name: document.getElementById("EditName").value,
				Surname: document.getElementById("EditSurname").value,
				PhoneNumber: document.getElementById("EditPhoneNumber").value
			};

			fetch("/Home/EditContact", {
				method: "POST",
				headers: {
					"Content-Type": "application/json"
				},
				body: JSON.stringify(updatedData)
			})
			.then(response => {
				if (response.ok) {
					alert("Kayıt başarıyla güncellendi.");
					location.reload(); // Sayfayı yenile
				} else {
					response.json().then(data => alert(data.message));
				}
			})
			.catch(error => {
				console.error("Hata:", error);
				alert("Bir hata oluştu.");
			});
		});

		});



			$(document).ready(function () {
			// Ekleme Formu için jQuery Validation
			$("#addForm").validate({
				rules: {
					Name: {
						required: true,
					},
					Surname: {
						required: true,
					},
					PhoneNumber: {
						required: true,
						digits: true,
					}
				},
				messages: {
					Name: {
						required: "Ad girilmesi zorunludur.",
					},
					Surname: {
						required: "Soyad girilmesi zorunludur.",
					},
					PhoneNumber: {
						required: "Telefon numarası girilmesi zorunludur.",
						digits: "Telefon numarası yalnızca rakamlardan oluşmalıdır.",
					}
				},
			});
		});
	</script>
</body>
</html>